/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bia } from "./Bia";
import { BiaCountArgs } from "./BiaCountArgs";
import { BiaFindManyArgs } from "./BiaFindManyArgs";
import { BiaFindUniqueArgs } from "./BiaFindUniqueArgs";
import { CreateBiaArgs } from "./CreateBiaArgs";
import { UpdateBiaArgs } from "./UpdateBiaArgs";
import { DeleteBiaArgs } from "./DeleteBiaArgs";
import { Department } from "../../department/base/Department";
import { BiaService } from "../bia.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bia)
export class BiaResolverBase {
  constructor(
    protected readonly service: BiaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "read",
    possession: "any",
  })
  async _biasMeta(
    @graphql.Args() args: BiaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bia])
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "read",
    possession: "any",
  })
  async bias(@graphql.Args() args: BiaFindManyArgs): Promise<Bia[]> {
    return this.service.bias(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bia, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "read",
    possession: "own",
  })
  async bia(@graphql.Args() args: BiaFindUniqueArgs): Promise<Bia | null> {
    const result = await this.service.bia(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bia)
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "create",
    possession: "any",
  })
  async createBia(@graphql.Args() args: CreateBiaArgs): Promise<Bia> {
    return await this.service.createBia({
      ...args,
      data: {
        ...args.data,

        department: args.data.department
          ? {
              connect: args.data.department,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bia)
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "update",
    possession: "any",
  })
  async updateBia(@graphql.Args() args: UpdateBiaArgs): Promise<Bia | null> {
    try {
      return await this.service.updateBia({
        ...args,
        data: {
          ...args.data,

          department: args.data.department
            ? {
                connect: args.data.department,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bia)
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "delete",
    possession: "any",
  })
  async deleteBia(@graphql.Args() args: DeleteBiaArgs): Promise<Bia | null> {
    try {
      return await this.service.deleteBia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "read",
    possession: "any",
  })
  async getDepartment(
    @graphql.Parent() parent: Bia
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
