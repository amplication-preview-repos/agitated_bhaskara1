/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DepartmentService } from "../department.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DepartmentCreateInput } from "./DepartmentCreateInput";
import { Department } from "./Department";
import { DepartmentFindManyArgs } from "./DepartmentFindManyArgs";
import { DepartmentWhereUniqueInput } from "./DepartmentWhereUniqueInput";
import { DepartmentUpdateInput } from "./DepartmentUpdateInput";
import { BiaFindManyArgs } from "../../bia/base/BiaFindManyArgs";
import { Bia } from "../../bia/base/Bia";
import { BiaWhereUniqueInput } from "../../bia/base/BiaWhereUniqueInput";
import { GapAssessmentFindManyArgs } from "../../gapAssessment/base/GapAssessmentFindManyArgs";
import { GapAssessment } from "../../gapAssessment/base/GapAssessment";
import { GapAssessmentWhereUniqueInput } from "../../gapAssessment/base/GapAssessmentWhereUniqueInput";
import { RiskAssessmentFindManyArgs } from "../../riskAssessment/base/RiskAssessmentFindManyArgs";
import { RiskAssessment } from "../../riskAssessment/base/RiskAssessment";
import { RiskAssessmentWhereUniqueInput } from "../../riskAssessment/base/RiskAssessmentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DepartmentControllerBase {
  constructor(
    protected readonly service: DepartmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Department })
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDepartment(
    @common.Body() data: DepartmentCreateInput
  ): Promise<Department> {
    return await this.service.createDepartment({
      data: data,
      select: {
        createdAt: true,
        departmentDescription: true,
        departmentName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Department] })
  @ApiNestedQuery(DepartmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async departments(@common.Req() request: Request): Promise<Department[]> {
    const args = plainToClass(DepartmentFindManyArgs, request.query);
    return this.service.departments({
      ...args,
      select: {
        createdAt: true,
        departmentDescription: true,
        departmentName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Department })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async department(
    @common.Param() params: DepartmentWhereUniqueInput
  ): Promise<Department | null> {
    const result = await this.service.department({
      where: params,
      select: {
        createdAt: true,
        departmentDescription: true,
        departmentName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Department })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDepartment(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() data: DepartmentUpdateInput
  ): Promise<Department | null> {
    try {
      return await this.service.updateDepartment({
        where: params,
        data: data,
        select: {
          createdAt: true,
          departmentDescription: true,
          departmentName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Department })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDepartment(
    @common.Param() params: DepartmentWhereUniqueInput
  ): Promise<Department | null> {
    try {
      return await this.service.deleteDepartment({
        where: params,
        select: {
          createdAt: true,
          departmentDescription: true,
          departmentName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bias")
  @ApiNestedQuery(BiaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bia",
    action: "read",
    possession: "any",
  })
  async findBias(
    @common.Req() request: Request,
    @common.Param() params: DepartmentWhereUniqueInput
  ): Promise<Bia[]> {
    const query = plainToClass(BiaFindManyArgs, request.query);
    const results = await this.service.findBias(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        impactScale: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bias")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async connectBias(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: BiaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bias: {
        connect: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bias")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async updateBias(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: BiaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bias: {
        set: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bias")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async disconnectBias(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: BiaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bias: {
        disconnect: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/gapAssessments")
  @ApiNestedQuery(GapAssessmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GapAssessment",
    action: "read",
    possession: "any",
  })
  async findGapAssessments(
    @common.Req() request: Request,
    @common.Param() params: DepartmentWhereUniqueInput
  ): Promise<GapAssessment[]> {
    const query = plainToClass(GapAssessmentFindManyArgs, request.query);
    const results = await this.service.findGapAssessments(params.id, {
      ...query,
      select: {
        assessmentDetails: true,
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gapAssessments")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async connectGapAssessments(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: GapAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gapAssessments: {
        connect: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gapAssessments")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async updateGapAssessments(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: GapAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gapAssessments: {
        set: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gapAssessments")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async disconnectGapAssessments(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: GapAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gapAssessments: {
        disconnect: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/riskAssessments")
  @ApiNestedQuery(RiskAssessmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RiskAssessment",
    action: "read",
    possession: "any",
  })
  async findRiskAssessments(
    @common.Req() request: Request,
    @common.Param() params: DepartmentWhereUniqueInput
  ): Promise<RiskAssessment[]> {
    const query = plainToClass(RiskAssessmentFindManyArgs, request.query);
    const results = await this.service.findRiskAssessments(params.id, {
      ...query,
      select: {
        analysisDetails: true,
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/riskAssessments")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async connectRiskAssessments(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: RiskAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      riskAssessments: {
        connect: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/riskAssessments")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async updateRiskAssessments(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: RiskAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      riskAssessments: {
        set: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/riskAssessments")
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "update",
    possession: "any",
  })
  async disconnectRiskAssessments(
    @common.Param() params: DepartmentWhereUniqueInput,
    @common.Body() body: RiskAssessmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      riskAssessments: {
        disconnect: body,
      },
    };
    await this.service.updateDepartment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
