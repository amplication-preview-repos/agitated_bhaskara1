/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RoleManagement as PrismaRoleManagement,
  User as PrismaUser,
} from "@prisma/client";

export class RoleManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RoleManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.roleManagement.count(args);
  }

  async roleManagements(
    args: Prisma.RoleManagementFindManyArgs
  ): Promise<PrismaRoleManagement[]> {
    return this.prisma.roleManagement.findMany(args);
  }
  async roleManagement(
    args: Prisma.RoleManagementFindUniqueArgs
  ): Promise<PrismaRoleManagement | null> {
    return this.prisma.roleManagement.findUnique(args);
  }
  async createRoleManagement(
    args: Prisma.RoleManagementCreateArgs
  ): Promise<PrismaRoleManagement> {
    return this.prisma.roleManagement.create(args);
  }
  async updateRoleManagement(
    args: Prisma.RoleManagementUpdateArgs
  ): Promise<PrismaRoleManagement> {
    return this.prisma.roleManagement.update(args);
  }
  async deleteRoleManagement(
    args: Prisma.RoleManagementDeleteArgs
  ): Promise<PrismaRoleManagement> {
    return this.prisma.roleManagement.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.roleManagement
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
