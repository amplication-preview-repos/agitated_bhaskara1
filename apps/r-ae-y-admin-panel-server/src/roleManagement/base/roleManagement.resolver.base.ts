/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RoleManagement } from "./RoleManagement";
import { RoleManagementCountArgs } from "./RoleManagementCountArgs";
import { RoleManagementFindManyArgs } from "./RoleManagementFindManyArgs";
import { RoleManagementFindUniqueArgs } from "./RoleManagementFindUniqueArgs";
import { CreateRoleManagementArgs } from "./CreateRoleManagementArgs";
import { UpdateRoleManagementArgs } from "./UpdateRoleManagementArgs";
import { DeleteRoleManagementArgs } from "./DeleteRoleManagementArgs";
import { User } from "../../user/base/User";
import { RoleManagementService } from "../roleManagement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RoleManagement)
export class RoleManagementResolverBase {
  constructor(
    protected readonly service: RoleManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoleManagement",
    action: "read",
    possession: "any",
  })
  async _roleManagementsMeta(
    @graphql.Args() args: RoleManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoleManagement])
  @nestAccessControl.UseRoles({
    resource: "RoleManagement",
    action: "read",
    possession: "any",
  })
  async roleManagements(
    @graphql.Args() args: RoleManagementFindManyArgs
  ): Promise<RoleManagement[]> {
    return this.service.roleManagements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoleManagement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoleManagement",
    action: "read",
    possession: "own",
  })
  async roleManagement(
    @graphql.Args() args: RoleManagementFindUniqueArgs
  ): Promise<RoleManagement | null> {
    const result = await this.service.roleManagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoleManagement)
  @nestAccessControl.UseRoles({
    resource: "RoleManagement",
    action: "create",
    possession: "any",
  })
  async createRoleManagement(
    @graphql.Args() args: CreateRoleManagementArgs
  ): Promise<RoleManagement> {
    return await this.service.createRoleManagement({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoleManagement)
  @nestAccessControl.UseRoles({
    resource: "RoleManagement",
    action: "update",
    possession: "any",
  })
  async updateRoleManagement(
    @graphql.Args() args: UpdateRoleManagementArgs
  ): Promise<RoleManagement | null> {
    try {
      return await this.service.updateRoleManagement({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoleManagement)
  @nestAccessControl.UseRoles({
    resource: "RoleManagement",
    action: "delete",
    possession: "any",
  })
  async deleteRoleManagement(
    @graphql.Args() args: DeleteRoleManagementArgs
  ): Promise<RoleManagement | null> {
    try {
      return await this.service.deleteRoleManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: RoleManagement
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
